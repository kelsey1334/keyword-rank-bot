import logging
import os
import aiohttp
import asyncio
from datetime import time
from queue import Queue

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)

# Load bi·∫øn m√¥i tr∆∞·ªùng
API_USERNAME = os.getenv("API_USERNAME")
API_PASSWORD = os.getenv("API_PASSWORD")
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
EXCHANGE_API_KEY = os.getenv("EXCHANGE_API_KEY")
ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")  # ID c·ªßa b·∫°n

# Logging
logging.basicConfig(level=logging.INFO)
job_queue = Queue()

# ==================== G·ªåI API =====================

async def call_dataforseo_api(keyword: str):
    url = "https://api.dataforseo.com/v3/serp/google/organic/live/advanced"
    payload = {
        "keyword": keyword,
        "location_code": 1028581,
        "language_code": "vi",
        "depth": 10
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=[payload], auth=aiohttp.BasicAuth(API_USERNAME, API_PASSWORD)) as resp:
            data = await resp.json()
            try:
                items = data['tasks'][0]['result'][0]['items']
                domains = [item['domain'] for item in items if item.get('type') == 'organic' and 'domain' in item]
                return domains
            except Exception as e:
                return [f"L·ªói khi l·∫•y d·ªØ li·ªáu: {str(e)}"]

async def get_weather_bangkok():
    url = f"https://api.openweathermap.org/data/2.5/weather?q=Bangkok&appid={WEATHER_API_KEY}&units=metric&lang=vi"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()
            try:
                temp = data['main']['temp']
                desc = data['weather'][0]['description'].capitalize()
                return f"üå§ Th·ªùi ti·∫øt Bangkok h√¥m nay: {desc}, nhi·ªát ƒë·ªô {temp}¬∞C"
            except:
                return "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt."

async def get_exchange_rate():
    url = f"https://v6.exchangerate-api.com/v6/{EXCHANGE_API_KEY}/latest/THB"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()
            try:
                rate = data['conversion_rates']['VND']
                return f"üí± 100 Baht = {round(rate * 100):,} VND"
            except:
                return "Kh√¥ng l·∫•y ƒë∆∞·ª£c t·ª∑ gi√°."

# ==================== L·ªÜNH BOT =====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "ü§ñ Xin ch√†o! Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi bot ki·ªÉm tra th·ª© h·∫°ng Google!\n\n"
        "üí° H√£y b·∫•m: `/search t·ª´_kh√≥a` ƒë·ªÉ ki·ªÉm tra th·ª© h·∫°ng website.\n"
        "üìå V√≠ d·ª•: `/search go88`\n\n"
        "üìé M·ªôt s·ªë l·ªánh h·ªØu √≠ch:\n"
        "‚Ä¢ /getidtele - L·∫•y ID Telegram\n"
        "‚Ä¢ /tygia - Xem t·ª∑ gi√° 100 Baht\n\n"
        "üöÄ Ch√∫c b·∫°n m·ªôt ng√†y hi·ªáu qu·∫£!"
    )
    await update.message.reply_text(message, parse_mode="Markdown")

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyword = ' '.join(context.args)
    if not keyword:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p t·ª´ kh√≥a sau l·ªánh /search")
        return
    await update.message.reply_text("ƒêang x·ª≠ l√Ω...")
    job_queue.put((update, keyword))

async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text(f"ID c·ªßa telegram c·ªßa b·∫°n l√†: {user_id}")

async def tygia(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = await get_exchange_rate()
    await update.message.reply_text(text)

# ==================== WORKER & SCHEDULER =====================

async def worker(app):
    while True:
        if not job_queue.empty():
            update, keyword = job_queue.get()
            domains = await call_dataforseo_api(keyword)
            if domains:
                msg = "\n".join([f"Top {i+1}: {domain}" for i, domain in enumerate(domains[:10])])
            else:
                msg = "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£."
            try:
                await update.message.reply_text(f"üîç K·∫øt qu·∫£ cho t·ª´ kh√≥a \"{keyword}\":\n{msg}")
            except Exception as e:
                logging.warning(f"L·ªói g·ª≠i tin nh·∫Øn: {e}")
        await asyncio.sleep(1)

async def morning_message(context: ContextTypes.DEFAULT_TYPE):
    weather = await get_weather_bangkok()
    exchange = await get_exchange_rate()
    quote = "üå± M·ªói ng√†y l√† m·ªôt c∆° h·ªôi ƒë·ªÉ t·ªët h∆°n h√¥m qua."
    food = "ü•£ G·ª£i √Ω m√≥n s√°ng: Ch√°o th·ªãt b·∫±m ho·∫∑c m√¨ tr·ªôn cay Th√°i."
    message = f"{weather}\n\n{food}\n\n{quote}\n\n{exchange}"
    await context.bot.send_message(chat_id=ADMIN_TELEGRAM_ID, text=message)

# ==================== KH·ªûI CH·∫†Y BOT =====================

async def setup():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("search", search))
    app.add_handler(CommandHandler("getidtele", get_id))
    app.add_handler(CommandHandler("tygia", tygia))

    app.job_queue.run_daily(morning_message, time=time(hour=8, minute=0))

    # Ch·∫°y worker sau khi bot kh·ªüi ƒë·ªông xong
    async def start_bg(app):
        asyncio.create_task(worker(app))
    app.post_init = start_bg

    print("Bot ƒëang ch·∫°y...")
    await app.run_polling()

# ==================== MAIN =====================

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(setup())
