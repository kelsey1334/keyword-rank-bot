import logging
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import aiohttp
import asyncio
from queue import Queue

# Th√¥ng tin x√°c th·ª±c t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
API_USERNAME = os.getenv("API_USERNAME")
API_PASSWORD = os.getenv("API_PASSWORD")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)

# H√†ng ƒë·ª£i x·ª≠ l√Ω t·ª´ ng∆∞·ªùi d√πng
job_queue = Queue()

# G·ªçi API DataForSEO ƒë·ªÉ l·∫•y k·∫øt qu·∫£ t√¨m ki·∫øm
async def call_dataforseo_api(keyword: str):
    url = "https://api.dataforseo.com/v3/serp/google/organic/live/advanced"
    payload = {
        "keyword": keyword,
        "location_code": 1028581,  # Vi·ªát Nam
        "language_code": "vi",
        "depth": 10
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=[payload], auth=aiohttp.BasicAuth(API_USERNAME, API_PASSWORD)) as resp:
            data = await resp.json()
            try:
                items = data['tasks'][0]['result'][0]['items']
                domains = [item['domain'] for item in items if item.get("type") == "organic" and "domain" in item]
                return domains
            except Exception as e:
                logging.error(f"L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {e}")
                return [f"L·ªói khi l·∫•y d·ªØ li·ªáu: {str(e)}"]

# L·ªánh /start: ch√†o m·ª´ng v√† h∆∞·ªõng d·∫´n
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "ü§ñ Xin ch√†o! T√¥i l√† bot h·ªó tr·ª£ ki·ªÉm tra th·ª© h·∫°ng t·ª´ kh√≥a tr√™n Google.\n\n"
        "üëâ ƒê·ªÉ ki·ªÉm tra th·ª© h·∫°ng, h√£y d√πng l·ªánh:\n"
        "/search t·ª´_kh√≥a\n"
        "V√≠ d·ª•: /search go88\n\n"
        "üìå T√¥i s·∫Ω tr·∫£ v·ªÅ top 10 k·∫øt qu·∫£ t√¨m ki·∫øm organic t·∫°i Vi·ªát Nam."
    )
    await update.message.reply_text(message)

# L·ªánh /getidtele: tr·∫£ v·ªÅ ID ng∆∞·ªùi d√πng
async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text(f"üÜî ID Telegram c·ªßa b·∫°n l√†: {user_id}")

# L·ªánh /search: ƒë∆∞a v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyword = ' '.join(context.args)
    if not keyword:
        await update.message.reply_text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t·ª´ kh√≥a sau l·ªánh /search\nV√≠ d·ª•: /search go88")
        return
    await update.message.reply_text("‚è≥ ƒêang x·ª≠ l√Ω, vui l√≤ng ch·ªù gi√¢y l√°t...")
    job_queue.put((update, keyword))

# X·ª≠ l√Ω h√†ng ƒë·ª£i, g·ª≠i k·∫øt qu·∫£ v·ªÅ ng∆∞·ªùi d√πng
async def worker(application):
    while True:
        if not job_queue.empty():
            update, keyword = job_queue.get()
            domains = await call_dataforseo_api(keyword)
            if domains:
                msg = "\n".join([f"üîπ Top {i+1}: {domain}" for i, domain in enumerate(domains[:10])])
            else:
                msg = "‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£."
            try:
                await update.message.reply_text(f"üìä Top 10 domain cho t·ª´ kh√≥a \"{keyword}\":\n{msg}")
            except Exception as e:
                logging.warning(f"L·ªói g·ª≠i tin nh·∫Øn: {e}")
        await asyncio.sleep(1)

# C√†i ƒë·∫∑t v√† kh·ªüi ch·∫°y bot
async def setup():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("getidtele", get_id))
    app.add_handler(CommandHandler("search", search))
    asyncio.create_task(worker(app))
    print("ü§ñ Bot ƒëang ch·∫°y...")
    await app.run_polling()

# Kh·ªüi ƒë·ªông ch∆∞∆°ng tr√¨nh (t∆∞∆°ng th√≠ch v·ªõi Railway)
if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().create_task(setup())
    asyncio.get_event_loop().run_forever()
